// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
// Plus imports for other components in your app.

@use "sass:map";

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$TestApp-primary: mat.define-palette(mat.$indigo-palette);
$TestApp-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$TestApp-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$TestApp-theme: mat.define-light-theme(
  (
    color: (
      primary: $TestApp-primary,
      accent: $TestApp-accent,
      warn: $TestApp-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($TestApp-theme);

/* You can add global styles to this file, and also import other style files */

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

@mixin makeTheme($themeId, $isDefaultTheme, $light, $dark) {
  -theme- {
    --def-theme-id: #{$themeId};
    --def-theme-is-default: #{$isDefaultTheme};
  }

  $selector: "[theme=#{$themeId}]";
  @if $isDefaultTheme {
    $selector: '#{$selector}, html:not([theme]), html[theme=""]';
  }

  #{$selector} {
    --def-theme-mode: shared;
    @each $k, $l in $light {
      $d: map.get($dark, $k);
      @if $l == $d {
        #{$k}: #{$d};
      }
    }

    @at-root {
      html[theme-mode=""]:is(&),
      html[theme-mode=""] &,
      html:not([theme-mode]):is(&),
      html:not([theme-mode]) & {
        @each $k, $l in $light {
          $d: map.get($dark, $k);
          @if $l != $d {
            #{$k}: #{$l};
          }
        }

        @media (prefers-color-scheme: dark) {
          @each $k, $l in $light {
            $d: map.get($dark, $k);
            @if $l != $d {
              #{$k}: #{$d};
            }
          }
        }
      }
    }

    @at-root {
      html[theme-mode="light"]:is(&),
      html[theme-mode="light"] & {
        --def-theme-mode: light;
        @each $k, $l in $light {
          $d: map.get($dark, $k);
          @if $l != $d {
            #{$k}: #{$l};
          }
        }
      }
    }

    @at-root {
      html[theme-mode="dark"]:is(&),
      html[theme-mode="dark"] & {
        --def-theme-mode: dark;
        @each $k, $l in $light {
          $d: map.get($dark, $k);
          @if $l != $d {
            #{$k}: #{$d};
          }
        }
      }
    }
  }
}

@include makeTheme(
  my-theme,
  true,
  (
    "--theme-background": #fff,
    "--theme-background-low": #ccc,
  ),
  (
    "--theme-background": #f00,
    "--theme-background-low": #ccc,
  )
);

@include makeTheme(
  my-theme-2,
  false,
  (
    "--theme-background": #f0f,
    "--theme-background-low": #ccc,
  ),
  (
    "--theme-background": #00f,
    "--theme-background-low": #ccc,
  )
);
