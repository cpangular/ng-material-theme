@use "sass:map";
@use "sass:list";
@use "sass:meta";

@use "./contrast";
@use "./shade";
@use "./tint";
@use "./legacy";
@use "./util";

@function config($config) {
  @if meta.type-of($config) == color {
    $config: (
      color: $config,
    );
  }
  $color: map.get($config, color);

  // $contrast: contrast.ensure-values(map.get($config, contrast), $color);
  $shade: shade.ensure-values(map.get($config, shades), $color);
  $tint: tint.ensure-values(map.get($config, tints), $color);
  // $legacy: legacy.ensure-values(map.get($config, legacy), $color);

  $variations: map.get($config, variations);
  $aliases: map.get($config, aliases);

  @return (
    color: $color,
    //contrast: $contrast,
    shades: $shade,
    tints: $tint,
    // legacy: $legacy,
    variations: if($variations, $variations, ()),
    aliases: if($aliases, $aliases, ())
  );
}

@function -get-variation-properties($props, $darkMode) {
  @if meta.type-of($props) == list {
    @if list.length($props) == 1 {
      @return list.nth($props, 1);
    }
    @if list.length($props) > 1 {
      @return list.nth($props, if($darkMode, 2, 1));
    }
  }
  @return $props;
}

@function to-css-properties($name, $config, $darkMode) {
  $config: config($config);

  $color: map.get($config, color);
  // $contrast: map.get($config, contrast);
  $shades: map.get($config, shades);
  $tints: map.get($config, tints);
  // $legacy: map.get($config, legacy);
  $variations: map.get($config, variations);
  $aliases: map.get($config, aliases);

  $props: ();
  $props: map.merge(
    $props,
    util.to-variation(
      (
        default: $color,
      ),
      $name
    )
  );
  // $props: map.merge($props, util.to-properties($contrast, $name, "contrast"));

  $v: -get-variation-properties($tints, $darkMode);
  $props: map.merge($props, util.to-variation($v, $name, "tint"));

  $v: -get-variation-properties($shades, $darkMode);
  $props: map.merge($props, util.to-variation($v, $name, "shade"));

  //$props: map.merge($props, util.to-variation($legacy, $name, "legacy", true));

  @each $k, $v in $variations {
    $props: map.merge($props, util.to-properties($v, $name, $k));
  }

  // apply contrasts
  @each $key, $color in $props {
    $contrasts: contrast.make-contrast-colors($key, $color, null);
    @if $contrasts {
      $props: map.merge($props, $contrasts);
    }
  }

  @each $k, $v in $aliases {
    $k: if(string.index($k, "--") == 1, $k, util.css-property-name($name, $k));

    @if $v == "default" {
      $v: util.css-property-name($name);
    } @else if string.index($v, "default--") == 1 {
      $v: string.slice($v, 10);
      $v: util.css-property-name($name, null, $v);
    } @else {
      $div-pos: string.index($v, "--");
      @if $div-pos == null {
        $v: util.css-property-name($name, $v);
      } @else {
        $p: string.slice($v, $div-pos + 2);
        $v: string.slice($v, 1, $div-pos - 1);
        $v: util.css-property-name($name, $v, $p);
      }
    }
    $v: var(#{$v});
    $props: map.set($props, $k, $v);
  }
  @return $props;
}

@mixin include($name, $config, $darkMode) {
  $props: to-css-properties($name, $config, $darkMode);
  @each $k, $v in $props {
    #{$k}: #{$v};
  }
}
