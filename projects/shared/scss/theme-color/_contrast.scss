@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use "sass:color";

@use "./util";

$-defaults: (
  high: 100%,
  medium: 87%,
  low: 80%,
  lower: 75%,
  lowest: 50%,
  // stroke-high: 25%,
  // stroke: 8%,
  // stroke-low: 4%,
  default: medium,
);

@function -transform-values($target, $color) {
  $baseAlpha: color.alpha($color);
  $color: color.change($color, $alpha: 1);
  $brightness: color.whiteness($color);
  $baseColor: white;
  @if $brightness > 50 {
    $baseColor: black;
  }
  @each $k, $v in $target {
    @if meta.type-of($v) == number {
      $cColor: color.mix($baseColor, $color, $v);
      $cColor: color.change($cColor, $alpha: $baseAlpha);
      $target: map.set($target, $k, $cColor);
    }
  }
  @return $target;
}

@function ensure-values($values, $color) {
  @if ($values == false) {
    @return ();
  }
  @if ($values == null or $values == true) {
    $values: ();
  }
  $values: util.ensure-default-values($values, $-defaults);
  $values: -transform-values($values, $color);
  @return $values;
}

@function make-contrast-colors($key, $color, $weightsOrColors: null) {
  @if meta.type-of($color) != color {
    @return null;
  }

  $weightsOrColors: util.ensure-default-values(if($weightsOrColors, $weightsOrColors, ()), $-defaults);
  $colors: -transform-values($weightsOrColors, $color);

  $values: ();

  @each $k, $v in $colors {
    @if $k == default {
      $v: var(#{$key}--contrast-#{$v});
      $values: map.set($values, #{$key}--contrast, $v);
    } @else {
      $values: map.set($values, #{$key}--contrast-#{$k}, $v);
    }
  }

  @return $values;
}
