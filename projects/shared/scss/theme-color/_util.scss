@use "sass:list";
@use "sass:math";
@use "sass:map";
@use "sass:meta";

@function css-property-name($palette, $variation: null, $property: null, $isRef: false) {
  @if $property == default {
    $property: null;
  }
  $key: ($palette);
  @if $variation != null {
    $key: list.append($key, $variation);
  }
  @if $property != null {
    $key: list.append($key, $property);
  }
  $colorKey: "--theme-color#{if($isRef, -ref, null)}";
  @each $k in $key {
    $colorKey: #{$colorKey}--#{$k};
  }
  @return $colorKey;
}

@function brightness($color) {
  $sum: red($color) + green($color) + blue($color);
  @return percentage(math.div($sum, (255 * 3)));
}

@function ensure-default-values($target, $values) {
  @each $k, $v in $values {
    @if not map.has-key($target, $k) {
      $target: map.set($target, $k, $v);
    }
  }
  @return $target;
}

@function to-variation($variationProps, $paletteName, $variation: null, $isRef: false) {
  @if $variation == default {
    $variation: null;
  }
  $vars: ();

  @each $varKey, $varValue in $variationProps {
    @if ($varKey == default and meta.type-of($varValue) == string) {
      // create link for default
      $varKey: css-property-name($paletteName, $variation, null, $isRef);
      $varValue: var(css-property-name($paletteName, #{$variation}-#{$varValue}, null, $isRef));
    } @else if $varKey == default {
      $varKey: css-property-name($paletteName, $variation, null, $isRef);
    } @else {
      $varKey: css-property-name($paletteName, if(not $variation, $varKey, #{$variation}-#{$varKey}), null, $isRef);
    }
    $vars: map.merge($vars, (#{$varKey}: $varValue));
  }
  @return $vars;
}

@function to-properties($values, $paletteName, $propPrefix: null, $isRef: false) {
  $vars: ();
  @each $k, $v in $values {
    $variationName: if(not $propPrefix, $k, #{$propPrefix}-#{$k});

    @if $k == default and meta.type-of($v) == string {
      $variationName: if(not $propPrefix, $k, $propPrefix);

      $pName: if(not $propPrefix, $v, #{$propPrefix}-#{$v});

      $v: var(css-property-name($paletteName, $pName, null, $isRef));
    }

    $var: (#{css-property-name($paletteName, $variationName, null, $isRef)}: $v);
    $vars: map.merge($vars, $var);
  }
  @return $vars;
}
