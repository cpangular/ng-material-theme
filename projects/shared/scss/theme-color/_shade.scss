@use "sass:meta";
@use "sass:map";
@use "sass:color";
@use "sass:list";

@use "./util";

$-defaults: (
  lowest: -80%,
  lower: -40%,
  low: -20%,
  medium: 0%,
  high: 20%,
  higher: 40%,
  highest: 80%,
  default: low,
);

@function -flip-values($values) {
  @return (
    lowest: map.get($values, highest),
    lower: map.get($values, higher),
    low: map.get($values, high),
    medium: map.get($values, medium),
    high: map.get($values, low),
    higher: map.get($values, lower),
    highest: map.get($values, lowest),
    default: map.get($values, default)
  );
}

@function -transform-values($target, $color) {
  @each $k, $v in $target {
    @if meta.type-of($v) == number {
      @if $v < 0% {
        $v: color.mix($color, black, 100% + $v);
      } @else if $v > 0% {
        $v: color.mix($color, white, 100% - $v);
      } @else {
        $v: $color;
      }
      $target: map.set($target, $k, $v);
    }
  }
  @return $target;
}

@function ensure-values($values, $color) {
  @if ($values == false) {
    @return ((), ());
  }
  @if ($values == null or $values == true) {
    $values: ((), ());
  }
  @if meta.type-of($values) == map {
    $values: (-flip-values($values), $values);
  }

  $lightValues: util.ensure-default-values(list.nth($values, 1), -flip-values($-defaults));
  $lightValues: -transform-values($lightValues, $color);

  $darkValues: util.ensure-default-values(list.nth($values, 2), $-defaults);
  $darkValues: -transform-values($darkValues, $color);

  $values: ($lightValues, $darkValues);

  @return $values;
}
